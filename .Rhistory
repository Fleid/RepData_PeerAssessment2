install.packages("swirl")
> library("swirl")
library("swirl")
library(swirl)
swirl()
my_vector <- as.vector(1:20)
info()
?as
my_vector
my_vector <- 1:20
my_vector
dim(my_vector)
legnth(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vecotr
my_vector
class(my_vector)
my_matrix <- my_vector
install.packages("rpostgresql")
install.packages("rmysql")
install.packages("rmysql")
install.packages("rmysql", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
library(RMySQL)
install.packages("RPostgreSQL")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
install.packages("RCurl")
install.packages("RJSONIO")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
library("RCurl")
library("RJSONIO")
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "3",
"Superficie m2"= "60",
"Arrondissement"= "Paris 15e"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
GlobalParameters=
;
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"SuperficieM2"= "0",
"PrixEuro"= "0",
"Arrondissement"= "0",
"CodePostal"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "i+298tmkI7OfaRVNQUIqig4NVKN+LXfB9E7BZZd9EaKTR3xIa/Nj5W6Hx44ZQWrPI6RcoSw95Pdv1ip3bABBqw==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/7b1ad4d3b7da48b49339c184d5e12d7e/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
irquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
install.packages(c("boot", "codetools", "digest", "foreign", "Formula", "Hmisc", "httpuv", "httr", "jsonlite", "knitr", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "quantmod", "RColorBrewer", "RCurl", "reshape2", "rmarkdown", "RMySQL", "RSQLite", "sqldf", "swirl"))
setwd("~/Documents/GitHub/RepData_PeerAssessment2")
Sys.setlocale("LC_TIME", "en_US")
library(ggplot2)
library(grid) #pushViewport
library(R.utils) #bunzip2
library(stringr) #str_trim
library(stringdist)
sessionInfo()
SD_Raw <- read.csv("StormData.csv", header = TRUE, sep = ",")
EVTYPE_Ref <- read.csv("EVTYPE_Ref.txt",header = TRUE, sep =",")
