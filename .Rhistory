install.packages("swirl")
> library("swirl")
library("swirl")
library(swirl)
swirl()
my_vector <- as.vector(1:20)
info()
?as
my_vector
my_vector <- 1:20
my_vector
dim(my_vector)
legnth(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vecotr
my_vector
class(my_vector)
my_matrix <- my_vector
install.packages("rpostgresql")
install.packages("rmysql")
install.packages("rmysql")
install.packages("rmysql", type="source")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
library(RMySQL)
install.packages("RPostgreSQL")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
install.packages("RCurl")
install.packages("RJSONIO")
library("RCurl")library("RJSONIO")# Accept SSL certificates issued by public Certificate Authoritiesoptions(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))h = basicTextGatherer()req = list(Id="score00001",           Instance=list(FeatureVector=                             list(                                 "NbPieces"= "0",                                 "Superficie m2"= "0",                                 "Arrondissement"= "0"                             )                         ,                         GlobalParameters=                             fromJSON('{}')           ))body = toJSON(req)api_key = "abc123" # Replace this with the API key for the web serviceauthz_hdr = paste('Bearer', api_key, sep=' ')h$reset()curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",            httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),            postfields=body,            writefunction = h$update,            verbose = TRUE)result = h$value()print(result)
library("RCurl")library("RJSONIO")
library("RCurl")
library("RJSONIO")
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"Superficie m2"= "0",
"Arrondissement"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "abc123" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "3",
"Superficie m2"= "60",
"Arrondissement"= "Paris 15e"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "igI9Kobb6uwCt31TXPhDYJI2kK30oZJbRfHj94UZoDpXkee4X+nVDwnrVrac+TsuI0nMlOSUSueqwJYMosYG+g==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/38b29b03e71a4a37ad67499f4f167eb7/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
GlobalParameters=
;
library("RCurl")
library("RJSONIO")
# Accept SSL certificates issued by public Certificate Authorities
options(RCurlOptions = list(sslVersion=3L, cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
h = basicTextGatherer()
req = list(Id="score00001",
Instance=list(FeatureVector=
list(
"NbPieces"= "0",
"SuperficieM2"= "0",
"PrixEuro"= "0",
"Arrondissement"= "0",
"CodePostal"= "0"
)
,
GlobalParameters=
fromJSON('{}')
))
body = toJSON(req)
api_key = "i+298tmkI7OfaRVNQUIqig4NVKN+LXfB9E7BZZd9EaKTR3xIa/Nj5W6Hx44ZQWrPI6RcoSw95Pdv1ip3bABBqw==" # Replace this with the API key for the web service
authz_hdr = paste('Bearer', api_key, sep=' ')
h$reset()
curlPerform(url = "https://ussouthcentral.services.azureml.net/workspaces/bb7225cedf354dc9942b5f1c1064ad9e/services/7b1ad4d3b7da48b49339c184d5e12d7e/score",
httpheader=c('Content-Type' = "application/json", 'Authorization' = authz_hdr),
postfields=body,
writefunction = h$update,
verbose = TRUE
)
result = h$value()
print(result)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
irquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
setwd("~/Documents/GitHub/RepData_PeerAssessment2")
sessioninfo()
sessionInfo()
source('~/.active-rstudio-document')
sessionInfo()
setwd("~/Documents/GitHub/RepData_PeerAssessment2")
Sys.setlocale("LC_TIME", "en_US")
library(ggplot2)
sessionInfo()
URL <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
download.file(URL, destfile = "./data/StormData.csv.bz2", method="curl")
download.file(URL, destfile = "StormData.csv.bz2", method="curl")
unz("StormData.csv.bz2", "StormData.csv")
?unz
?unzip
unzip("StormData.csv.bz2")
unz("StormData.csv.bz2")
unz("StormData.csv.bz2","StormData.csv")
con <- unz("StormData.csv.bz2","StormData.csv")
data <- read.csv(con)
con <- unz("StormData.csv.bz2","StormData.csv")
data <- read.csv(con)
unz("StormData.csv.bz2","repdata%2Fdata%2FStormData.csv")
con <- unz("StormData.csv.bz2","repdata%2Fdata%2FStormData.csv")
data <- read.csv(con)
test <- read.csv(bzfile("StormData.csv.bz2"))
install.packages("utils")
install.packages("utils")
install.packages("utils")
?bunzip2
library("utils")
library(utils)
sessionInfo()
?bunzip2
install.packages("R.utils")
library(R.utils)
?bunzip2
bunzip2("StormData.csv.bz2")
bunzip2("StormData.csv.bz2",overwrite=TRUE)
download.file(URL, destfile = "StormData.csv.bz2", method="curl")
?load.csv
?load.csv
SD_Raw <- load.csv("StormData.csv",header=TRUE,sep=",")
SD_Raw <- read.csv("StormData.csv", header = TRUE, sep = ",")
View(SD_Raw)
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2Fpd01016005curr.pdf", destfile = "StormData_Documentation.pdf", method = "curl")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fpeer2_doc%2FNCDC%20Storm%20Events-FAQ%20Page.pdf", destfile = "StormData_FAQ.pdf", method = "curl")
describe(SD_raw)
summary(SD_raw)
summary(SD_Raw)
View(SD_Raw)
unique(SD_Raw$EVTYPE)
?aggregate
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(SD_Raw$EVTYPE)))
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(SD_Raw$EVTYPE)),FUN=sum)
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(SD_Raw$EVTYPE[1,])),FUN=sum)
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(SD_Raw$EVTYPE[])),FUN=sum)
head(SD_Raw$EVTYP)
head(SD_Raw$EVTYPE)
head(SD_Raw$EVTYPE[,1])
head(SD_Raw$EVTYPE[[]])
SD_EV <- cbind(SD_Raw$BGN_Date,SD_Raw$EVTYPE,SD_Raw$FATALITIES,SD_Raw$INJURIES)
?cbind
View(SD_EV)
SD_Raw <- read.csv("StormData.csv", header = TRUE, sep = ",")
attributes(SD_Raw$EVTYPE)
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(attribuets(SD_Raw$EVTYPE[])),FUN=sum)
)
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(attribuets(SD_Raw$EVTYPE[])),FUN=sum)
)
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(attribuets(SD_Raw$EVTYPE[]))),FUN=sum)
aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(attributes(SD_Raw$EVTYPE[]))),FUN=sum)
h1 <- aggregate(cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES),by=list(c(SD_Raw$EVTYPE[])),FUN=sum)
SD_Raw <- read.csv("StormData.csv", header = TRUE, sep = ",", stringsAsFactors=FALSE)
SD_Raw <- read.csv("StormData.csv", header = TRUE, sep = ",", stringsAsFactors=FALSE)
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(c(as.character(SD_Raw$EVTYPE))
,FUN=sum
)
)
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(c(as.character(SD_Raw$EVTYPE)))
,FUN=sum
)
names(h1) <- c("EVTYPE","FATALITIES","INJURIES")
summary(h1)
SD_Raw <- read.csv("StormData.csv", header = TRUE, sep = ",")
as.Date(SD_Raw$BGN_DATE)
as.Date(as.character(SD_Raw$BGN_DATE))
as.Date(as.character(SD_Raw$BGN_DATE),"%m/%d/%y")
as.Date(as.character(SD_Raw$BGN_DATE),"%m/%d/%Y")
as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y")
format(as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y"),"%Y")
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(c(
format(as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y"),"%Y")
,as.character(SD_Raw$EVTYPE)
))
,FUN=sum
)
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(c(
as.character(SD_Raw$EVTYPE)
))
,FUN=sum
)
?aggregate
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(
format(as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y"),"%Y")
,as.character(SD_Raw$EVTYPE)
)
,FUN=sum
)
names(h1) <- c("YEAR","EVTYPE","FATALITIES","INJURIES")
summary(h1)
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(
format(as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y"),"%Y")
##,as.character(SD_Raw$EVTYPE)
)
,FUN=sum
)
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(
format(as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y"),"%Y")
,as.character(SD_Raw$EVTYPE)
)
,FUN=sum
)
names(h1) <- c("YEAR","EVTYPE","FATALITIES","INJURIES")
summary(h1)
q2 <- ggplot(h1,aes(x=YEAR, y=FATALITIES))
q2 <- q2 + geom_line()
q2 <- q2 + ggtitle("Ah")
q2
q1 <- ggplot(h1,aes(x=YEAR, y=FATALITIES))
library(ggplot2)
q1 <- ggplot(h1,aes(x=YEAR, y=FATALITIES))
q1 <- q1 + geom_bar(stat="identity")
q1
q1 <- ggplot(h1,aes(x=YEAR, y=INJURIES))
q1 <- q1 + ggtitle("Total number of steps per day")
q1 <- q1 + geom_bar(stat="identity")
q1
q1 <- ggplot(h1,aes(x=YEAR, y=INJURIES))
q1 <- q1 + geom_bar(stat="identity")
q2 <- ggplot(h1,aes(x=YEAR, y=FATALITIES))
q2 <- q1 + geom_bar(stat="identity")
q
multiplot(q1, q2, cols=2)
library(grid)
pushViewport(viewport(layout = grid.layout(1, 2)))
print(q1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(q2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
q1 <- ggplot(h1,aes(x=YEAR, y=INJURIES))
q1 <- q1 + geom_bar(stat="identity")
q2 <- ggplot(h1,aes(x=YEAR, y=FATALITIES))
q2 <- q2 + geom_bar(stat="identity")
pushViewport(viewport(layout = grid.layout(1, 2)))
print(q1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(q2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
h1_modern <- subset(h1,h1$YEAR >= 1990)
q1 <- ggplot(h1_modern,aes(x=YEAR, y=INJURIES))
q1 <- q1 + geom_bar(stat="identity")
q2 <- ggplot(h1_modern,aes(x=YEAR, y=FATALITIES))
q2 <- q2 + geom_bar(stat="identity")
pushViewport(viewport(layout = grid.layout(1, 2)))
print(q1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(q2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
q1 <- ggplot(h1_modern,aes(x=YEAR, y=INJURIES))
q1 <- q1 + geom_bar(stat="identity") +y_lim(0,10000)
q2 <- ggplot(h1_modern,aes(x=YEAR, y=FATALITIES))
q2 <- q2 + geom_bar(stat="identity") +y_lim(0,10000)
pushViewport(viewport(layout = grid.layout(1, 2)))
print(q1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(q2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
q1 <- ggplot(h1_modern,aes(x=YEAR, y=INJURIES))
q1 <- q1 + geom_bar(stat="identity") +ylim(0,10000)
q2 <- ggplot(h1_modern,aes(x=YEAR, y=FATALITIES))
q2 <- q2 + geom_bar(stat="identity") +ylim(0,10000)
pushViewport(viewport(layout = grid.layout(1, 2)))
print(q1, vp = viewport(layout.pos.row = 1, layout.pos.col = 1))
print(q2, vp = viewport(layout.pos.row = 1, layout.pos.col = 2))
q1 <- ggplot(h1_modern,aes(x=YEAR, y=INJURIES, colour=EVTYPE))
q1 <- q1 + geom_bar(stat="identity") +ylim(0,10000)
q1
q1 <- ggplot(h1_modern,aes(x=YEAR, y=INJURIES, colour=YEAR))
q1 <- q1 + geom_bar(stat="identity") +ylim(0,10000)
q1
Unique(SD_Raw$EVTYPE)
unique(SD_Raw$EVTYPE)
unique(SD_Raw$EVTYPE[SD_Raw$FATALITIES>0])
unique(SD_Raw$EVTYPE[SD_Raw$FATALITIES + SD_Raw$INJURIES>0])
EVLIST <- unique(SD_Raw$EVTYPE[SD_Raw$FATALITIES + SD_Raw$INJURIES>0])
EVLIST
EVLIST <- unique(h1_modern$EVTYPE[h1_modern$FATALITIES + h1_modern$INJURIES>0])
EVLIST
EVTYPE_Ref <- read.csv("EVRTYPE_Ref.rtf",header = FALESE, sep =",")
EVTYPE_Ref <- read.csv("EVTYPE_Ref.rtf",header = FALESE, sep =",")
EVTYPE_Ref <- read.csv("EVTYPE_Ref.rtf",header = FALSE, sep =",")
EVTYPE_Ref <- read.csv("EVTYPE_Ref.txt",header = FALSE, sep =",")
h1_modern$CLEANV <- toupper(str_trim(h1_modern$EVTYPE))
library(stringr)
h1_modern$CLEANV <- toupper(str_trim(h1_modern$EVTYPE))
h1 <- aggregate(
cbind(SD_Raw$FATALITIES,SD_Raw$INJURIES)
,by=list(
format(as.Date(SD_Raw$BGN_DATE,"%m/%d/%Y"),"%Y")
,toupper(str_trim(as.character(SD_Raw$EVTYPE)))
)
,FUN=sum
)
names(h1) <- c("YEAR","EVTYPE","FATALITIES","INJURIES")
h1_modern <- subset(h1,h1$YEAR >= 1990)
View(EVTYPE_Ref)
EVTYPE_Ref <- read.csv("EVTYPE_Ref.txt",header = TRUE, sep =",")
stringdist
install.packages('stringdist')
library(stringdist)
install.packages(c("boot", "codetools", "digest", "foreign", "Formula", "Hmisc", "httpuv", "httr", "jsonlite", "knitr", "manipulate", "MASS", "Matrix", "mgcv", "nlme", "quantmod", "RColorBrewer", "RCurl", "reshape2", "rmarkdown", "RMySQL", "RSQLite", "sqldf", "swirl"))
install.packages(c("boot", "codetools", "digest", "foreign",
)
)
ssionInfo()
sessionInfo()
